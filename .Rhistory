inj_test %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex"))
injuries_2017 %>% mutate_at(4, tolower)
injuries_2017 <- injuries_2017 %>% mutate_at(4, tolower)
selected <- injuries_2017 %>% filter(prod1 == 1842)
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex"))
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex"))
injuries_2017 <- injuries_2017 %>% mutate_at(3, round, 0)
selected <- injuries_2017 %>% filter(prod1 == 1842)
selected
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex"))
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
selected %>%
sample_n(10) %>%
pull(narrative)
selected %>%
filter(age >= 50) %>%
sample_n(10) %>%
pull(narrative)
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
population_2017
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
population_2017
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# install.packages("neiss")
# devtools::install_github("hadley/neiss")
library(shiny)
library(reactlog)
library(plotly)
library(vroom)
library(tidyverse)
library(dplyr)
# load(file = "C:\\Users\\ashanmu8\\Downloads\\injuries.rda")
# load(file = "C:\\Users\\ashanmu8\\Downloads\\population.rda")
# load(file = "C:\\Users\\ashanmu8\\Downloads\\products.rda")
# view(head(injuries_2017))
# view(population)
# view(products)
# population_2017<- population_2017 %>% rename('population' = 'n')
injuries_2017 <-injuries %>% filter(trmt_date >= '2017-01-01' & trmt_date <= '2017-12-31')
injuries_2017 <- injuries_2017 %>% mutate_at(4, tolower)
injuries_2017 <- injuries_2017 %>% mutate_at(3, round, 0)
population_2017 <- population %>% filter(year == 2017)
# view(head(injuries))
selected <- injuries_2017 %>% filter(prod1 == 1842)
nrow(selected)
selected %>% count(diag, wt = weight, sort = TRUE)
selected %>% count(body_part, wt = weight, sort = TRUE)
selected %>% count(location, wt = weight, sort = TRUE)
summary <- selected %>% count(age, sex, wt = weight)
summary %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
selected %>%
filter(age >= 50) %>%
sample_n(10) %>%
pull(narrative)
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex"))
selected
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
population_2017
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population_2017 * 1e4)
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
population_2017
population_2017
population_2017<- population_2017 %>% rename('population' = 'n')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# install.packages("neiss")
# devtools::install_github("hadley/neiss")
library(shiny)
library(reactlog)
library(plotly)
library(vroom)
library(tidyverse)
library(dplyr)
# load(file = "C:\\Users\\ashanmu8\\Downloads\\injuries.rda")
# load(file = "C:\\Users\\ashanmu8\\Downloads\\population.rda")
# load(file = "C:\\Users\\ashanmu8\\Downloads\\products.rda")
# view(head(injuries_2017))
# view(population)
# view(products)
population_2017<- population_2017 %>% rename('population' = 'n')
injuries_2017 <-injuries %>% filter(trmt_date >= '2017-01-01' & trmt_date <= '2017-12-31')
injuries_2017 <- injuries_2017 %>% mutate_at(4, tolower)
injuries_2017 <- injuries_2017 %>% mutate_at(3, round, 0)
population_2017 <- population %>% filter(year == 2017)
# view(head(injuries))
selected <- injuries_2017 %>% filter(prod1 == 1842)
nrow(selected)
selected %>% count(diag, wt = weight, sort = TRUE)
selected %>% count(body_part, wt = weight, sort = TRUE)
selected %>% count(location, wt = weight, sort = TRUE)
summary <- selected %>% count(age, sex, wt = weight)
summary %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
selected %>%
filter(age >= 50) %>%
sample_n(10) %>%
pull(narrative)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# install.packages("neiss")
# devtools::install_github("hadley/neiss")
library(shiny)
library(reactlog)
library(plotly)
library(vroom)
library(tidyverse)
library(dplyr)
# load(file = "C:\\Users\\ashanmu8\\Downloads\\injuries.rda")
# load(file = "C:\\Users\\ashanmu8\\Downloads\\population.rda")
# load(file = "C:\\Users\\ashanmu8\\Downloads\\products.rda")
# view(head(injuries_2017))
# view(population)
# view(products)
injuries_2017 <-injuries %>% filter(trmt_date >= '2017-01-01' & trmt_date <= '2017-12-31')
injuries_2017 <- injuries_2017 %>% mutate_at(4, tolower)
injuries_2017 <- injuries_2017 %>% mutate_at(3, round, 0)
population_2017 <- population %>% filter(year == 2017)
population_2017<- population_2017 %>% rename('population' = 'n')
# view(head(injuries))
selected <- injuries_2017 %>% filter(prod1 == 1842)
nrow(selected)
selected %>% count(diag, wt = weight, sort = TRUE)
selected %>% count(body_part, wt = weight, sort = TRUE)
selected %>% count(location, wt = weight, sort = TRUE)
summary <- selected %>% count(age, sex, wt = weight)
summary %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
summary <- selected %>%
count(age, sex, wt = weight) %>%
left_join(population_2017, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
summary %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
selected %>%
filter(age >= 50) %>%
sample_n(10) %>%
pull(narrative)
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
products
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
selected
injuries
products
runApp('~/Documents/Learn/Projects/Shiny app/MasteringShiny/MasteringShiny')
library(shiny)
library(reactlog)
library(plotly)
library(vroom)
library(tidyverse)
library(dplyr)
if (!exists("injuries")) {1}
if (exists("injuries")) {1}
getwd()
getwd()
setwd("C:\\Users\\ashanmu8\\Documents\\Learn\\Projects\\Shiny app\\ED_injuries")
getwd()
load(file = "injuries.rda")
load(file = "population.rda")
load(file = "products.rda")
if (!exists("injuries")) {
load(file = "injuries.rda")
load(file = "population.rda")
load(file = "products.rda")
}
getwd()
View(ap)
View(ap)
View(ap)
View(ap)
View(inj_test)
View(summary)
shiny::runApp()
injuries_2017
injuries_2017 <-injuries %>% filter(trmt_date >= '2017-01-01' & trmt_date <= '2017-12-31')
injuries_2017 <- injuries_2017 %>% mutate_at(4, tolower)
injuries_2017 <- injuries_2017 %>% mutate_at(3, round, 0)
injuries_2017 <- injuries_2017 %>% rename(prod_code=prod1)
population_2017 <- population %>% filter(year == 2017)
population_2017<- population_2017 %>% rename('population' = 'n')
products_2017 <- products %>% rename('prod_code' = 'code')
Sorted_ProductName <- setNames(products_2017$prod_code, products_2017$title)
Sorted_ProductName <- Sorted_ProductName[order(names(Sorted_ProductName))]
products_2017
injuries
library(shiny)
library(reactlog)
library(plotly)
library(vroom)
library(tidyverse)
library(dplyr)
if (!exists("injuries")) {
load(file = "injuries.rda")
load(file = "population.rda")
load(file = "products.rda")
}
injuries_2017 <-injuries %>% filter(trmt_date >= '2017-01-01' & trmt_date <= '2017-12-31')
injuries_2017 <- injuries_2017 %>% mutate_at(4, tolower)
injuries_2017 <- injuries_2017 %>% mutate_at(3, round, 0)
injuries_2017 <- injuries_2017 %>% rename(prod_code=prod1)
population_2017 <- population %>% filter(year == 2017)
population_2017<- population_2017 %>% rename('population' = 'n')
products_2017 <- products %>% rename('prod_code' = 'code')
Sorted_ProductName <- setNames(products_2017$prod_code, products_2017$title)
Sorted_ProductName <- Sorted_ProductName[order(names(Sorted_ProductName))]
injuries_2017
injuries_2017 %>%
mutate(diag = fct_lump(fct_infreq(diag), n = 5))
injuries_2017 %>% fct_infreq(diag)
injuries_2017
injuries_2017 %>% fct_infreq(diag)
injuries_2017 %>% mutate( fct_infreq(diag) )
injuries_2017 %>% mutate( fct_infreq(diag) )
injuries_2017[,diag]
injuries_2017[,"diag"]
injuries_2017[,"diag"] %>% mutate( fct_infreq(diag) )
injuries_2017[,"diag"] %>% mutate( fct_infreq(diag) ) %>% group_by(diag)
injuries_2017[,"diag"] %>% mutate(fct_lump( fct_infreq(diag) ) )
injuries_2017[,"diag"] %>% mutate(fct_lump( fct_infreq(diag), n =5 ) )
injuries_2017 %>% mutate(fct_lump( fct_infreq(diag), n =5 ) )
injuries_2017[,"diag"] %>%
mutate(fct_lump( fct_infreq(diag), n =5 ) ) %>%
group_by(diag)
injuries_2017[,"diag"] %>%
mutate(fct_lump( fct_infreq(diag), n =5 ) ) %>%
group_by(diag) %>%
summarise(n = as.integer(sum(weight)))
injuries_2017
injuries_2017
injuries_2017[,("diag", "weight")] %>%
mutate(fct_lump( fct_infreq(diag), n =5 ) ) %>%
group_by(diag) %>%
summarise(n = as.integer(sum(weight)))
injuries_2017[,c("diag", "weight")] %>%
mutate(fct_lump( fct_infreq(diag), n =5 ) ) %>%
group_by(diag) %>%
summarise(n = as.integer(sum(weight)))
injuries_2017[,c("diag", "weight")] %>%
group_by(diag) %>%
summarise(n = as.integer(sum(weight)))
injuries[,c("diag", "weight")] %>%
group_by(diag) %>%
summarise(n = as.integer(sum(weight)))
injuries_2017 %>%
mutate(diag = fct_lump(fct_infreq(diag), n = 5)) %>%
group_by(diag) %>%
summarise(n = as.integer(sum(weight)))
count_top <- function(df, var, n = 5) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
runApp()
injuries_2017
injuries_2017
products_2017
products_2017 %>% filter(prod_code==1842)
runApp()
selected() %>% pull(narrative) %>% sample(1)
injuries_2017 %>% pull(narrative) %>% sample(1)
injuries_2017 %>% pull(narrative) %>% sample(1)
injuries_2017 %>% pull(narrative) %>% sample(1)
injuries_2017 %>% pull(narrative) %>% sample(2)
runApp()
Sorted_ProductName
injuries_2017 %>% mutate(code)
injuries_2017[,prod_code]
injuries_2017[,"prod_code"]
injuries_2017[,"prod_code"] %>% count(prod_code)
injuries_2017[,"prod_code"] %>% mutate(cnt = count(prod_code))
injuries_2017[,"prod_code"] %>% count(prod_code)
products_2017
Cnt_inj <- injuries_2017[,"prod_code"] %>% count(prod_code)
Cnt_inj
Cnt_inj[order(n)]
Cnt_inj[order(Cnt_inj$n)]
Cnt_inj$n
Cnt_inj %>% arrange(n)
Cnt_inj %>% arrange(desc(n)
Cnt_inj %>% arrange(desc(n))
Cnt_inj %>% arrange(desc(n))
population_2017
products_2017
Cnt_inj %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code"))
injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code"))
Cnt_inj <- injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code"))
Cnt_inj %>% arrange(desc(n))
injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n))
Cnt_inj <- injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n))
injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n)) %>%
rename(cnt=n)
Cnt_inj <- injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n)) %>%
rename(cnt=n)
Cnt_inj[,c("title","Cnt")]
Cnt_inj[,c("title","cnt")]
view(Cnt_inj[,c("title","cnt")])
runApp()
injuries_2017[,"prod_code"] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n)) %>%
rename(cnt=n)  %>%
summarise(n = as.integer(sum(weight)
)
)
injuries_2017[,c("prod_code","weight")] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n)) %>%
rename(cnt=n)  %>%
summarise(n = as.integer(sum(weight)))
injuries_2017
injuries_2017
injuries_2017[,c("prod_code","weight")]
Cnt_inj <- injuries_2017[,c("prod_code","weight")] %>%
count(prod_code) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n)) %>%
rename(cnt=n)
Cnt_inj
injuries_2017[,c("prod_code","weight")] %>%
as.integer(sum(weight)) %>%
left_join(products_2017, by = c("prod_code")) %>%
arrange(desc(n)) %>%
rename(cnt=n)
injuries_2017[,c("prod_code","weight")] %>%
as.integer(sum(weight))
injuries_2017[,c("prod_code","weight")]
injuries_2017[,c("prod_code","weight")] %>%
as.integer(sum("weight"))
injuries_2017[,c("prod_code","weight")] %>%
summarise(as.integer(sum(weight)))
injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code"))
Cnt_inj <- injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code"))
Cnt_inj
Cnt_inj %>% summarize(sum(weight)
)
Cnt_inj %>% summarize(sum(weight)) %>% group_by(title())
Cnt_inj %>% summarize(sum(weight)) %>% group_by(title)
Cnt_inj %>% group_by(title) %>% summarize(sum(weight))
Cnt_inj %>% group_by(title) %>% summarize(sum(weight), count(prod_code))
Cnt_inj %>% group_by(title) %>% summarize(sum(weight)) %>% count(prod_code)
Cnt_inj %>% group_by(title) %>% summarize(weight_count= sum(weight))
Cnt_inj %>% group_by(title) %>% summarize(weighted_count= sum(weight))
Cnt_inj %>% group_by(title) %>% summarize(weighted_count= count(title))
Cnt_inj %>% group_by(title) %>% summarize(weighted_count= count(prod_code))
Cnt_inj %>% group_by(title) %>% summarize(weighted_count= n())
Cnt_inj %>% group_by(title) %>% summarize(weighted_count= sum(weight), total_count= n())
Cnt_inj
injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code")) %>%
group_by(title) %>% summarize(weighted_count= sum(weight), total_count= n())
injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code")) %>%
group_by(title) %>% summarize(weighted_count= sum(weight), total_count= n()) %>%
arrange(desc(n))
injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code")) %>%
group_by(title) %>% summarize(weighted_count= sum(weight), total_count= n()) %>%
arrange(desc(weighted_count))
Cnt_inj <- injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code")) %>%
group_by(title) %>% summarize(weighted_count= sum(weight), total_count= n()) %>%
arrange(desc(weighted_count))
view(Cnt_inj)
setNames(Cnt_inj$title, Cnt_inj$weighted_count)
Sorted_ProductName <- setNames(Cnt_inj$title, Cnt_inj$weighted_count)
runApp()
Sorted_ProductName
Sorted_ProductName <- setNames(Cnt_inj$weighted_count, Cnt_inj$title )
Sorted_ProductName
runApp()
injuries_2017[,c("prod_code","weight")]
Cnt_inj
injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code"))
injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code")) %>%
group_by(prod_code, title) %>% summarize(weighted_count= sum(weight), total_count= n()) %>%
arrange(desc(weighted_count))
Cnt_inj <- injuries_2017[,c("prod_code","weight")] %>%
left_join(products_2017, by = c("prod_code")) %>%
group_by(prod_code, title) %>% summarize(weighted_count= sum(weight), total_count= n()) %>%
arrange(desc(weighted_count))
Sorted_ProductName <- setNames(Cnt_inj$weighted_count, Cnt_inj$prod_code )
Sorted_ProductName
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
Cnt_inj
Cnt_inj[,c("title","weighted_count")]
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
